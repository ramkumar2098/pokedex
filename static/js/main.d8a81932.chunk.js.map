{"version":3,"sources":["components/Type.jsx","components/EnhancedTableToolbar.jsx","components/EnhancedTableHead.jsx","App.js","reportWebVitals.js","index.js"],"names":["Type","type","size","style","backgroundColor","color","Chip","label","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","width","EnhancedTableToolbar","query","handleChange","handleTypeChange","selectedTypes","useState","types","setTypes","useEffect","axios","get","then","response","data","catch","console","log","Toolbar","sx","pl","sm","pr","xs","Typography","flex","variant","component","TextField","value","onChange","fullWidth","FormControl","marginLeft","InputLabel","top","Select","multiple","input","OutlinedInput","renderValue","selected","display","flexWrap","gap","map","name","MenuItem","headCells","id","numeric","disablePadding","EnhancedTableHead","order","orderBy","onRequestSort","TableHead","TableRow","headCell","TableCell","align","padding","sortDirection","TableSortLabel","active","direction","onClick","property","event","disabled","EnhancedTable","rows","setRows","count","setCount","loading","setLoading","getData","column","offset","limit","params","toString","finally","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","max","length","dialogId","setDialogId","setQuery","setSelectedTypes","Box","justifyContent","Paper","md","lg","mb","e","target","split","TableContainer","Table","minWidth","position","CircularProgress","left","_order","TableBody","height","slice","row","Dialog","open","onClose","DialogTitle","DialogContent","src","img_large","alt","minHeight","DialogContentText","description","cursor","hover","img_small","colSpan","TablePagination","rowsPerPageOptions","onPageChange","newPage","onRowsPerPageChange","parseInt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.d8a81932.chunk.js","sourcesContent":["import { Chip } from '@mui/material'\n\nfunction Type({ type, size = 'medium', style }) {\n  let backgroundColor = 'rgb(0 0 0 / 8%)'\n  let color = '#fff'\n\n  switch (type) {\n    case 'Grass':\n      backgroundColor = '#7c5'\n      break\n    case 'Poison':\n      backgroundColor = '#a59'\n      break\n    case 'Fire':\n      backgroundColor = '#f42'\n      break\n    case 'Flying':\n      backgroundColor = '#89f'\n      break\n    case 'Water':\n      backgroundColor = '#39f'\n      break\n    case 'Bug':\n      backgroundColor = '#ab2'\n      break\n    case 'Normal':\n      backgroundColor = '#aa9'\n      break\n    case 'Electric':\n      backgroundColor = '#fc3'\n      break\n    case 'Ground':\n      backgroundColor = '#db5'\n      break\n    case 'Fairy':\n      backgroundColor = '#e9e'\n      break\n    case 'Fighting':\n      backgroundColor = '#e9e'\n      break\n    case 'Psychic':\n      backgroundColor = '#e9e'\n      break\n    case 'Rock':\n      backgroundColor = '#ba6'\n      break\n    case 'Ghost':\n      backgroundColor = '#66b'\n      break\n    case 'Dragon':\n      backgroundColor = '#76e'\n      break\n    default:\n      color = '#000'\n  }\n  return (\n    <Chip\n      label={type}\n      size={size}\n      style={{ color, backgroundColor, ...style }}\n    />\n  )\n}\n\nexport default Type\n","import {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  TextField,\n  Toolbar,\n  Typography,\n} from '@mui/material'\nimport { useEffect, useState } from 'react'\nimport { Box } from '@mui/system'\nimport axios from 'axios'\nimport Type from './Type'\n\nconst ITEM_HEIGHT = 48\nconst ITEM_PADDING_TOP = 8\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n}\n\nfunction EnhancedTableToolbar({\n  query,\n  handleChange,\n  handleTypeChange,\n  selectedTypes,\n}) {\n  const [types, setTypes] = useState([])\n\n  useEffect(() => {\n    axios\n      .get(`https://expressjs-pokedex.herokuapp.com/pokedex/types`)\n      .then(response => {\n        setTypes(response.data.data)\n      })\n      .catch(console.log)\n  }, [])\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n      }}\n    >\n      <Typography sx={{ flex: '1 1 100%' }} variant=\"h6\" component=\"div\">\n        Pokedex\n      </Typography>\n      <TextField\n        label=\"Filter by name\"\n        value={query}\n        onChange={handleChange}\n        variant=\"outlined\"\n        size=\"small\"\n        fullWidth\n      />\n      <FormControl style={{ marginLeft: '8px' }} fullWidth>\n        <InputLabel style={{ top: '-7px' }}>Filter by types</InputLabel>\n        <Select\n          multiple\n          value={selectedTypes}\n          onChange={handleTypeChange}\n          input={<OutlinedInput label=\"Filter by types\" />}\n          renderValue={selected => (\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n              {selected.map(value => (\n                <Type key={value} type={value} size=\"small\" />\n              ))}\n            </Box>\n          )}\n          MenuProps={MenuProps}\n          size=\"small\"\n        >\n          {types.map(name => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Toolbar>\n  )\n}\n\nexport default EnhancedTableToolbar\n","import { TableCell, TableHead, TableRow, TableSortLabel } from '@mui/material'\n\nconst headCells = [\n  { id: 'id', numeric: true, disablePadding: false, label: 'ID' },\n  { id: 'sprite', numeric: true, disablePadding: false, label: 'Sprite' },\n  { id: 'name', numeric: true, disablePadding: false, label: 'Name' },\n  { id: 'types', numeric: true, disablePadding: false, label: 'Types' },\n]\n\nfunction EnhancedTableHead({ order, orderBy, onRequestSort }) {\n  const createSortHandler = property => event => {\n    onRequestSort(event, property)\n  }\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n              disabled={headCell.id == 'sprite' || headCell.id == 'types'}\n            >\n              {headCell.label}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  )\n}\n\nexport default EnhancedTableHead\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  Paper,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  CircularProgress,\n} from '@mui/material'\nimport Type from './components/Type'\nimport EnhancedTableToolbar from './components/EnhancedTableToolbar'\nimport EnhancedTableHead from './components/EnhancedTableHead'\n\nfunction EnhancedTable() {\n  const [rows, setRows] = useState([])\n\n  const [count, setCount] = useState(0)\n\n  const [loading, setLoading] = useState(true)\n\n  const getData = ({ column, orderBy, offset, limit, query, types } = {}) => {\n    setLoading(true)\n    axios\n      .get(`https://expressjs-pokedex.herokuapp.com/pokedex`, {\n        params: {\n          column,\n          orderBy,\n          offset,\n          limit,\n          query,\n          types: types?.toString(),\n        },\n      })\n      .then(response => {\n        console.log(response.data)\n        setCount(+response.data.count)\n        if (offset && limit) {\n          setRows([...rows, ...response.data.data])\n          return\n        }\n        setRows(response.data.data)\n      })\n      .catch(console.log)\n      .finally(() => setLoading(false))\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const [order, setOrder] = useState('asc')\n  const [orderBy, setOrderBy] = useState('id')\n  const [page, setPage] = useState(0)\n  const [rowsPerPage, setRowsPerPage] = useState(5)\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc'\n    const _order = isAsc ? 'desc' : 'asc'\n    setOrder(_order)\n    setOrderBy(property)\n    setPage(0)\n    getData({\n      column: property,\n      orderBy: _order,\n      query,\n      types: selectedTypes,\n    })\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n    if (rows.length == newPage * rowsPerPage)\n      getData({\n        column: orderBy,\n        orderBy: order,\n        offset: rows.length,\n        limit: rowsPerPage,\n        query,\n        types: selectedTypes,\n      })\n  }\n\n  const handleChangeRowsPerPage = event => {\n    const rowsPerPage = parseInt(event.target.value, 10)\n    setRowsPerPage(rowsPerPage)\n    setPage(0)\n    getData({\n      column: orderBy,\n      orderBy: order,\n      limit: rowsPerPage,\n      query,\n      types: selectedTypes,\n    })\n  }\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0\n\n  const [dialogId, setDialogId] = useState(0)\n\n  const [query, setQuery] = useState('')\n\n  const handleChange = e => {\n    const query = e.target.value\n    setQuery(query)\n    setPage(0)\n    getData({\n      column: orderBy,\n      orderBy: order,\n      limit: rowsPerPage,\n      query,\n      types: selectedTypes,\n    })\n  }\n\n  const [selectedTypes, setSelectedTypes] = useState([])\n\n  const handleTypeChange = e => {\n    const selectedTypes = e.target.value\n    setSelectedTypes(\n      typeof selectedTypes == 'string'\n        ? selectedTypes.split(',')\n        : selectedTypes\n    )\n    setPage(0)\n    getData({\n      column: orderBy,\n      orderBy: order,\n      limit: rowsPerPage,\n      query,\n      types: selectedTypes,\n    })\n  }\n\n  return (\n    <Box sx={{ width: '100%', display: 'flex', justifyContent: 'center' }}>\n      <Paper\n        sx={{\n          width: { xs: '100%', md: '90%', lg: '70%' },\n          mb: 2,\n        }}\n      >\n        <EnhancedTableToolbar\n          {...{ query, handleChange, selectedTypes, handleTypeChange }}\n        />\n        <TableContainer>\n          <Table sx={{ minWidth: 750, position: 'relative' }} size={'medium'}>\n            {loading && (\n              <CircularProgress\n                style={{ position: 'absolute', left: '50%', top: '50%' }}\n              />\n            )}\n            <EnhancedTableHead\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody\n              style={{\n                height:\n                  !rows.length || rows.length >= 5\n                    ? 80.6 * rowsPerPage + 'px'\n                    : null,\n              }}\n            >\n              {rows\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map(row => (\n                  <>\n                    <Dialog\n                      open={dialogId == row.id}\n                      onClose={() => setDialogId(0)}\n                    >\n                      <DialogTitle>{row.name}</DialogTitle>\n                      <DialogContent>\n                        <img\n                          src={row.img_large}\n                          alt=\"no internet\"\n                          style={{\n                            width: '100%',\n                            backgroundColor: '#ebebeb',\n                            minHeight: '100px',\n                          }}\n                        />\n                        <DialogContentText>{row.description}</DialogContentText>\n                      </DialogContent>\n                    </Dialog>\n                    <TableRow\n                      onClick={e => setDialogId(row.id)}\n                      style={{ cursor: 'pointer' }}\n                      hover\n                    >\n                      <TableCell align=\"right\">{row.id}</TableCell>\n                      <TableCell align=\"right\">\n                        <img src={row.img_small} alt=\"no internet\" />\n                      </TableCell>\n                      <TableCell align=\"right\">{row.name}</TableCell>\n                      <TableCell align=\"right\">\n                        {row.types.map(type => (\n                          <Type\n                            key={type}\n                            type={type}\n                            style={{ marginLeft: '3px' }}\n                          />\n                        ))}\n                      </TableCell>\n                    </TableRow>\n                  </>\n                ))}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={count}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </Box>\n  )\n}\n\nexport default EnhancedTable\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}