{"version":3,"sources":["components/Type.jsx","components/EnhancedTableToolbar.jsx","components/EnhancedTableHead.jsx","App.js","reportWebVitals.js","index.js"],"names":["Type","type","backgroundColor","color","Chip","label","style","marginLeft","EnhancedTableToolbar","query","handleChange","Toolbar","sx","pl","sm","pr","xs","Typography","flex","variant","id","component","TextField","value","onChange","size","fullWidth","headCells","numeric","disablePadding","EnhancedTableHead","order","orderBy","onRequestSort","TableHead","TableRow","map","headCell","TableCell","align","padding","sortDirection","TableSortLabel","active","direction","onClick","property","event","disabled","EnhancedTable","useState","rows","setRows","count","setCount","loading","setLoading","getData","column","offset","limit","axios","get","params","then","response","console","log","data","catch","finally","useEffect","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","max","length","dialogId","setDialogId","setQuery","Box","width","display","justifyContent","Paper","md","lg","mb","e","target","TableContainer","Table","minWidth","position","CircularProgress","left","top","_order","TableBody","height","slice","row","Dialog","open","onClose","DialogTitle","name","DialogContent","src","img_large","alt","minHeight","DialogContentText","description","cursor","hover","img_small","types","colSpan","TablePagination","rowsPerPageOptions","onPageChange","newPage","onRowsPerPageChange","parseInt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.da47ecc4.chunk.js","sourcesContent":["import { Chip } from '@mui/material'\n\nfunction Type({ type }) {\n  let backgroundColor = 'rgb(0 0 0 / 8%)'\n  let color = '#fff'\n\n  switch (type) {\n    case 'Grass':\n      backgroundColor = '#7c5'\n      break\n    case 'Poison':\n      backgroundColor = '#a59'\n      break\n    case 'Fire':\n      backgroundColor = '#f42'\n      break\n    case 'Flying':\n      backgroundColor = '#89f'\n      break\n    case 'Water':\n      backgroundColor = '#39f'\n      break\n    case 'Bug':\n      backgroundColor = '#ab2'\n      break\n    case 'Normal':\n      backgroundColor = '#aa9'\n      break\n    case 'Electric':\n      backgroundColor = '#fc3'\n      break\n    case 'Ground':\n      backgroundColor = '#db5'\n      break\n    case 'Fairy':\n      backgroundColor = '#e9e'\n      break\n    case 'Fighting':\n      backgroundColor = '#e9e'\n      break\n    case 'Psychic':\n      backgroundColor = '#e9e'\n      break\n    case 'Rock':\n      backgroundColor = '#ba6'\n      break\n    case 'Ghost':\n      backgroundColor = '#66b'\n      break\n    case 'Dragon':\n      backgroundColor = '#76e'\n      break\n    default:\n      color = '#000'\n  }\n  return (\n    <Chip label={type} style={{ color, backgroundColor, marginLeft: '3px' }} />\n  )\n}\n\nexport default Type\n","import { TextField, Toolbar, Typography } from '@mui/material'\n\nfunction EnhancedTableToolbar({ query, handleChange }) {\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n      }}\n    >\n      <Typography\n        sx={{ flex: '1 1 100%' }}\n        variant=\"h6\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Pokedex\n      </Typography>\n      <TextField\n        label=\"Filter by name\"\n        value={query}\n        onChange={handleChange}\n        variant=\"outlined\"\n        size=\"small\"\n        fullWidth\n      />\n    </Toolbar>\n  )\n}\n\nexport default EnhancedTableToolbar\n","import { TableCell, TableHead, TableRow, TableSortLabel } from '@mui/material'\n\nconst headCells = [\n  { id: 'id', numeric: true, disablePadding: false, label: 'ID' },\n  { id: 'sprite', numeric: true, disablePadding: false, label: 'Sprite' },\n  { id: 'name', numeric: true, disablePadding: false, label: 'Name' },\n  { id: 'types', numeric: true, disablePadding: false, label: 'Types' },\n]\n\nfunction EnhancedTableHead({ order, orderBy, onRequestSort }) {\n  const createSortHandler = property => event => {\n    onRequestSort(event, property)\n  }\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n              disabled={headCell.id == 'sprite' || headCell.id == 'types'}\n            >\n              {headCell.label}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  )\n}\n\nexport default EnhancedTableHead\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  Paper,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  CircularProgress,\n} from '@mui/material'\nimport Type from './components/Type'\nimport EnhancedTableToolbar from './components/EnhancedTableToolbar'\nimport EnhancedTableHead from './components/EnhancedTableHead'\n\nfunction EnhancedTable() {\n  const [rows, setRows] = useState([])\n\n  const [count, setCount] = useState(0)\n\n  const [loading, setLoading] = useState(true)\n\n  const getData = ({ column, orderBy, offset, limit, query } = {}) => {\n    setLoading(true)\n    axios\n      .get(`https://expressjs-pokedex.herokuapp.com/pokedex`, {\n        params: { column, orderBy, offset, limit, query },\n      })\n      .then(response => {\n        console.log(response.data)\n        setCount(+response.data.count)\n        if (offset && limit) {\n          setRows([...rows, ...response.data.data])\n          return\n        }\n        setRows(response.data.data)\n      })\n      .catch(console.log)\n      .finally(() => setLoading(false))\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const [order, setOrder] = useState('asc')\n  const [orderBy, setOrderBy] = useState('id')\n  const [page, setPage] = useState(0)\n  const [rowsPerPage, setRowsPerPage] = useState(5)\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc'\n    const _order = isAsc ? 'desc' : 'asc'\n    setOrder(_order)\n    setOrderBy(property)\n    setPage(0)\n    getData({\n      column: property,\n      orderBy: _order,\n      query,\n    })\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n    if (rows.length == newPage * rowsPerPage)\n      getData({\n        column: orderBy,\n        orderBy: order,\n        offset: rows.length,\n        limit: rowsPerPage,\n        query,\n      })\n  }\n\n  const handleChangeRowsPerPage = event => {\n    const rowsPerPage = parseInt(event.target.value, 10)\n    setRowsPerPage(rowsPerPage)\n    setPage(0)\n    getData({\n      column: orderBy,\n      orderBy: order,\n      limit: rowsPerPage,\n      query,\n    })\n  }\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0\n\n  const [dialogId, setDialogId] = useState(0)\n\n  const [query, setQuery] = useState('')\n\n  const handleChange = e => {\n    const query = e.target.value\n    setQuery(query)\n    setPage(0)\n    getData({\n      column: orderBy,\n      orderBy: order,\n      limit: rowsPerPage,\n      query,\n    })\n  }\n\n  return (\n    <Box sx={{ width: '100%', display: 'flex', justifyContent: 'center' }}>\n      <Paper\n        sx={{\n          width: { xs: '100%', md: '90%', lg: '70%' },\n          mb: 2,\n        }}\n      >\n        <EnhancedTableToolbar query={query} handleChange={handleChange} />\n        <TableContainer>\n          <Table sx={{ minWidth: 750, position: 'relative' }} size={'medium'}>\n            {loading && (\n              <CircularProgress\n                style={{ position: 'absolute', left: '50%', top: '50%' }}\n              />\n            )}\n            <EnhancedTableHead\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody\n              style={{\n                height:\n                  !rows.length || rows.length >= 5\n                    ? 80.6 * rowsPerPage + 'px'\n                    : null,\n              }}\n            >\n              {rows\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map(row => (\n                  <>\n                    <Dialog\n                      open={dialogId == row.id}\n                      onClose={() => setDialogId(0)}\n                    >\n                      <DialogTitle>{row.name}</DialogTitle>\n                      <DialogContent>\n                        <img\n                          src={row.img_large}\n                          alt=\"no internet\"\n                          style={{\n                            width: '100%',\n                            backgroundColor: '#ebebeb',\n                            minHeight: '100px',\n                          }}\n                        />\n                        <DialogContentText>{row.description}</DialogContentText>\n                      </DialogContent>\n                    </Dialog>\n                    <TableRow\n                      onClick={e => setDialogId(row.id)}\n                      style={{ cursor: 'pointer' }}\n                      hover\n                    >\n                      <TableCell align=\"right\">{row.id}</TableCell>\n                      <TableCell align=\"right\">\n                        <img src={row.img_small} alt=\"no internet\" />\n                      </TableCell>\n                      <TableCell align=\"right\">{row.name}</TableCell>\n                      <TableCell align=\"right\">\n                        {row.types.map(type => (\n                          <Type key={type} type={type} />\n                        ))}\n                      </TableCell>\n                    </TableRow>\n                  </>\n                ))}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={count}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </Box>\n  )\n}\n\nexport default EnhancedTable\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}